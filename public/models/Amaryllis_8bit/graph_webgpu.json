{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void sgemm_81e90e8b08464e9a44e7910ad875fd886afeba4c8b6adf24eec65a4b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_e054e9592c688e900d43b4539f1d0b3418c031049a14901242973384(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3867 shape=(16384,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cfe10>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3770 shape=(1, 16384), order=[N, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a8d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3771 shape=(1, 16384), order=[N, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a898>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 16384\n    const int D0 = meta_buffer[3];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3867 shape=(16384,), order=[C]>, 'x0': <Variable Variable3770 shape=(1, 16384), order=[N, C]>}, outputs={'y': <Variable Variable13 shape=(1, 16384), order=[N, C]>}>\n        const float v4 = v1[d0];\n        const float v5 = v2[d0];\n        float v6;\n        {\n            v6 = v5 + v4;\n        }\n        //<Relu inputs={'x0': <Variable Variable13 shape=(1, 16384), order=[N, C]>}, outputs={'y': <Variable Variable3771 shape=(1, 16384), order=[N, C]>}>\n        float v7;\n        {\n            v7 = v6 > 0 ? v6 : 0;\n        }\n        v3[d0] = v7;\n    }\n}\n\n\nkernel void reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        y[gid] = x[gid];\n    }\n}\n\n\nkernel void transpose_01d732c2a0b27fbd1cc7efa543dbe6ae628408b156c4c76eaaeda903(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<Variable Variable15 shape=(1, 64, 16, 16), order=[N, C, H, W]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a208>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3417 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a710>\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    //load: 256\n    const int v3 = meta_buffer[2];\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int D0 = meta_buffer[4];\n    //load: 256\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<Transpose inputs={'x0': <Variable Variable15 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3417 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                v6 = v5;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_d591cfd54eea27b8d1f8e05c3912da13d92a08f854eeef2de58a8b1b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3866 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cf6d8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3768 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130992390>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3769 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130992390>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3768 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3866 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable24 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable24 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3769 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c4989f403d12993de160ea6426054d7b560c52c20869203d82b999f1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3865 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cf5c0>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3765 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a5f8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3766 shape=(1, 64, 16, 16), order=[N, C, H, W]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a208>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3767 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a5f8>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 256\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3765 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3766 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3366 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0*v6 + d1];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3366 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3865 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3767 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_af06c698ff27a8c95bc48eec864ddb426b28164ad37bc7bbf1f898e5(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3864 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cf518>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3763 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a0f0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3764 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a0f0>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3763 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3864 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable44 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable44 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3764 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_e616cea79df9c359d1f493a90120c12ee8e0bee0a66ac5a75223c22c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3863 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cf588>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3760 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a5f8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3761 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2af98>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3762 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a630>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3760 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3761 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3368 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3368 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3863 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3762 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_7b95cfdcb940be175412172729d1234f711e0caeb52f4c4234871453(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3862 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1d29e8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3758 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a978>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3759 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139ef0>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3862 shape=(64,), order=[C]>, 'x0': <Variable Variable3758 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable64 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable64 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3759 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_27b7f62170de2068a663c89c82ec001ee73e994e743316ac22807e49(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3861 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1d2828>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3755 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a630>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3756 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139940>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3757 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a630>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3755 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3756 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3370 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3370 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3861 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3757 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_d0b8b793bd82169cd3f03b75c4e9a189e2ef6d165c195b40561cb5a9(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3860 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1ebf98>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3753 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311391d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3754 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139160>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3860 shape=(64,), order=[C]>, 'x0': <Variable Variable3753 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable84 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable84 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3754 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_4a5f8de8062e780cbfc1bcf0a5c515dac42b6efc0771c5f2bd5944de(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3859 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131156160>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3750 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311392b0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3751 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c2a630>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3752 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311392b0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3750 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3751 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3372 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3372 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3859 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3752 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_5e906dddd1bc8784b84efa2f4178ccae76a9a05cb3a2ce9271f348fe(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3858 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1198c4828>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3748 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139b70>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3749 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139b70>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3748 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3858 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable104 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable104 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3749 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_67d40644d11849a317e2f3c3633367105ab6a448ce476a4a50f2f43b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3857 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1198f7080>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3745 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139b00>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3746 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311392b0>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3747 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139240>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3745 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3746 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3374 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3374 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3857 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3747 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_76e76544f9dbf6b667ddc1e61f527e9ff8a4aa16154bbe17a74a294b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3856 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd5ecf8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3743 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311390b8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3744 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x1311390b8>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3743 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3856 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable124 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable124 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3744 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_87516e893cfb5161a4a319defa3d3d0422eb9626e634106c5624ee81(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3855 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x118e6e1d0>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3740 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3741 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139240>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3742 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3740 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3741 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3376 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3376 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3855 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3742 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_2b3bef144a0f2a9d493a55415664821ba0c45522efdbb0f621a5a44e(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3854 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61be0>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3738 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139860>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3739 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139978>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3854 shape=(64,), order=[C]>, 'x0': <Variable Variable3738 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable144 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable144 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3739 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_009daceb9d502043da6c0e86e64bc04b5a4ce5865e8a4521fc508b97(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3853 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61978>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3735 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3736 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x131139f60>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3737 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3735 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3736 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3378 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3378 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3853 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3737 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_282ef2d0a47478deb180a5ae52b83ba67b289eee78663ec2a20e49bb(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3852 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61438>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3733 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4ebe0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3734 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61fd0>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3852 shape=(64,), order=[C]>, 'x0': <Variable Variable3733 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable164 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable164 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3734 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_7854360c15e27bdf792da15b694129dff1363fbe2f3330ed2a59d2b9(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3851 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61dd8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3730 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3731 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61748>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3732 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3730 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3731 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3380 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3380 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3851 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3732 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_aa7c22a069d41286b2fdbad534806578df6b914241e98d1ec5f35728(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3850 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61e80>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3728 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61eb8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3729 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61eb8>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3728 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3850 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable184 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable184 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3729 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_3c53069c7847a5946182c14004dc8ad1a126dec1d1d2af9576713f0f(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3849 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b610b8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3725 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x12fd4e1d0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3726 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61a90>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3727 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f614e0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3725 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3726 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3382 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3382 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3849 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3727 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_f5e2cb7ef239d0c8f4995851d45167a2c1b12bfb4c19c1e56decff3c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3848 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b619b0>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3723 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61780>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3724 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61e10>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3848 shape=(64,), order=[C]>, 'x0': <Variable Variable3723 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable204 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable204 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3724 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_16c82ae84703a535da65318db10807b4cbab6f8f88c5e5ec90aebd8a(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3847 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61470>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3720 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f615f8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3721 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f614e0>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3722 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61588>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3720 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3721 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3384 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3384 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3847 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3722 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c2510b8d53b1c94ae803d0df69f82ca9822a5647ef41e2f11947f1a3(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3846 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b616d8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3718 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61128>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3719 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f610b8>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3846 shape=(64,), order=[C]>, 'x0': <Variable Variable3718 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable224 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable224 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3719 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_6b073d673988cbbfaf1ddb05f29b25daed95e45c92bee5d99630a1cf(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3845 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130b61748>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3715 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f619b0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3716 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61588>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3717 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61550>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3715 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3716 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3386 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3386 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3845 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3717 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_3215e7f561eef757d1bb2d4a699fb0a7c4871d8a91277b9ed683fa33(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3844 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089f588>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3713 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61e48>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3714 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61b00>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3844 shape=(64,), order=[C]>, 'x0': <Variable Variable3713 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable244 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable244 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3714 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_5995b42ec143db185040151cd04e327ad317c17c90ed4442b9a84a63(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3843 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089fb00>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3710 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f537b8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3711 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61550>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3712 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53dd8>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3710 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3711 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3388 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3388 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3843 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3712 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c7ca163d3f63a473d70354d305c6451051557fc755865f35236bfb2d(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3842 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089fc88>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3708 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61668>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3709 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f61668>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3708 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3842 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable264 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable264 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3709 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_2367b95474a9e0d765ad986225ec2765c8367c74ae997799a10483ae(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3841 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089fb38>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3705 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53160>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3706 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53dd8>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3707 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53160>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3705 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3706 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3390 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3390 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3841 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3707 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_f2292bc48b333f5102e7c08e9a9e9ad1a81c77f17d47410e5bb25b09(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3840 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089f390>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3703 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53358>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3704 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f535c0>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3840 shape=(64,), order=[C]>, 'x0': <Variable Variable3703 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable284 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable284 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3704 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_48ec03d2e3487206f0fd2ca221b5dce39c51390b33a34263b3edad55(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3839 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x13089f400>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3700 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f534a8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3701 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53160>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3702 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53080>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3700 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3701 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3392 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3392 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3839 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3702 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_27ea93bfcf67ecd5271712f8bf20b06164a152c992b715478afc7166(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3838 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40160>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3698 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53278>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3699 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53278>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3698 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3838 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable304 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable304 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3699 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_34c9ce4e02b861188033419626b713421cfd53b16d25b1bca2369e8b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3837 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c405f8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3695 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130f53080>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3696 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97c50>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3697 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97860>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <Variable Variable3695 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x0': <Variable Variable3696 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3394 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v10 + v9;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3394 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3837 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3697 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_ae3432b23808a28ee83f372ec22037a974fd0573791d9b9b7d484f5c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3836 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40080>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3693 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97710>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3694 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97710>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3693 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3836 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable324 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable324 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3694 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_48e9362c61aa189cf53511ac1d2b945c87a5ace79a63cdc212d96508(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3835 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40390>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3690 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97d68>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3691 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97860>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3692 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97da0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int v7 = meta_buffer[6];\n    //load: 64\n    const int D0 = meta_buffer[7];\n    //load: 256\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3690 shape=(1, 16, 16, 64), order=[N, H, W, C]>, 'x1': <Variable Variable3691 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3396 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v9 = v2[d0 + d1*v5];\n            const float v10 = v3[d0 + d1*v6];\n            float v11;\n            {\n                v11 = v9 + v10;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3396 shape=(1, 64, 16, 16), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3835 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3692 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 + v8;\n            }\n            v4[d0 + d1*v7] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_5972479bea958b3cb173aae274682e34ee913502e564d46fe2193d1d(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3834 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c406d8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3688 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97160>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3689 shape=(1, 16, 16, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7cef0>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 64\n    const int v4 = meta_buffer[3];\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3834 shape=(64,), order=[C]>, 'x0': <Variable Variable3688 shape=(1, 16, 16, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable344 shape=(1, 64, 16, 16), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Relu inputs={'x0': <Variable Variable344 shape=(1, 64, 16, 16), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3689 shape=(1, 16, 16, 64), order=[N, H, W, C]>}>\n            float v9;\n            {\n                v9 = v8 > 0 ? v8 : 0;\n            }\n            v3[d0 + d1*v5] = v9;\n        }\n    }\n}\n\n\nkernel void elementwiseadd_a000ac957635042b40125802f38371401a54e3b7c6f98cdcac292aee(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable76 shape=(256,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c401d0>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3517 shape=(1, 16, 16, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97358>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable347 shape=(1, 16, 16, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c97358>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 256\n    const int v4 = meta_buffer[3];\n    //load: 256\n    const int v5 = meta_buffer[4];\n    //load: 256\n    const int D0 = meta_buffer[5];\n    //load: 256\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable76 shape=(256,), order=[C]>, 'x0': <Variable Variable3517 shape=(1, 16, 16, 256), order=[N, H, W, C]>}, outputs={'y': <Variable Variable347 shape=(1, 16, 16, 256), order=[N, H, W, C]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            v3[d0 + d1*v5] = v8;\n        }\n    }\n}\n\n\nkernel void depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f(device float * static_buffer[[buffer(0)]],\n                     device float * dynamic_buffer[[buffer(1)]],\n                     const device int * meta_buffer[[buffer(2)]],\n                     uint index[[thread_position_in_grid]],\n                     uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n    const int r = meta_buffer[2];\n\n    const int N = meta_buffer[3];\n    const int C1 = meta_buffer[4];\n    const int C2 = meta_buffer[5];\n    const int H1 = meta_buffer[6];\n    const int H2 = meta_buffer[7];\n    const int W1 = meta_buffer[8];\n    const int W2 = meta_buffer[9];\n\n    for (int gid = index; gid < N*H2*W2*C2; gid += num_threads) {\n        const int c2 = gid % C2;\n        const int w2 = gid / C2 % W2;\n        const int h2 = gid / C2 / W2 % H2;\n        const int n = gid / C2 / W2 / H2;\n        const int w1 = w2 / r;\n        const int h1 = h2 / r;\n        const int c1 = c2 + (w2 % r) * C2 + (h2 % r) * C2 * r;\n        y[gid] = x[((n*H1+h1)*W1+w1)*C1+c1];\n    }\n}\n\n\nkernel void fusedelementwise_2b6c3a3ec4c969b750b4de3bf5d809d449723efe8c3968597f04e9d5(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3832 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x11a1cf630>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<ConstantVariable ConstantVariable3833 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40dd8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3686 shape=(1, 32, 32, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7cc18>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3687 shape=(1, 32, 32, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7cc18>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int D0 = meta_buffer[6];\n    //load: 1024\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseMul inputs={'x0': <Variable Variable3686 shape=(1, 32, 32, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3833 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3185 shape=(1, 64, 32, 32), order=[N, C, H, W]>}>\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v8;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3185 shape=(1, 64, 32, 32), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3832 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable355 shape=(1, 64, 32, 32), order=[N, C, H, W]>}>\n            float v11;\n            {\n                v11 = v10 + v7;\n            }\n            //<Relu inputs={'x0': <Variable Variable355 shape=(1, 64, 32, 32), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3687 shape=(1, 32, 32, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0 + d1*v6] = v12;\n        }\n    }\n}\n\n\nkernel void elementwiseadd_032f577171c682895fe644f54eb957eba5fa0fbae473244eeedc2041(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable84 shape=(256,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40e80>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3523 shape=(1, 32, 32, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7c278>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable358 shape=(1, 32, 32, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7c278>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 256\n    const int v4 = meta_buffer[3];\n    //load: 256\n    const int v5 = meta_buffer[4];\n    //load: 256\n    const int D0 = meta_buffer[5];\n    //load: 1024\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable84 shape=(256,), order=[C]>, 'x0': <Variable Variable3523 shape=(1, 32, 32, 256), order=[N, H, W, C]>}, outputs={'y': <Variable Variable358 shape=(1, 32, 32, 256), order=[N, H, W, C]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            v3[d0 + d1*v5] = v8;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_6b37344c95ea25858495e9315f5b958eefebfb4b82d6db4bcf1b9e3a(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3830 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40f60>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<ConstantVariable ConstantVariable3831 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40748>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3684 shape=(1, 64, 64, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7ca58>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3685 shape=(1, 64, 64, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7ccc0>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int D0 = meta_buffer[6];\n    //load: 4096\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseMul inputs={'x1': <ConstantVariable ConstantVariable3830 shape=(64,), order=[C]>, 'x0': <Variable Variable3684 shape=(1, 64, 64, 64), order=[N, H, W, C]>}, outputs={'y': <Variable Variable3182 shape=(1, 64, 64, 64), order=[N, C, H, W]>}>\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v7;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3182 shape=(1, 64, 64, 64), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3831 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable366 shape=(1, 64, 64, 64), order=[N, C, H, W]>}>\n            float v11;\n            {\n                v11 = v10 + v8;\n            }\n            //<Relu inputs={'x0': <Variable Variable366 shape=(1, 64, 64, 64), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3685 shape=(1, 64, 64, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0 + d1*v6] = v12;\n        }\n    }\n}\n\n\nkernel void elementwiseadd_ecbabea27458df228a18b77bbd1bb799f37b52c50d61076bf366dc81(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable92 shape=(256,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40ba8>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3529 shape=(1, 64, 64, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7ccf8>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable369 shape=(1, 64, 64, 256), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7ccf8>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 256\n    const int v4 = meta_buffer[3];\n    //load: 256\n    const int v5 = meta_buffer[4];\n    //load: 256\n    const int D0 = meta_buffer[5];\n    //load: 4096\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable92 shape=(256,), order=[C]>, 'x0': <Variable Variable3529 shape=(1, 64, 64, 256), order=[N, H, W, C]>}, outputs={'y': <Variable Variable369 shape=(1, 64, 64, 256), order=[N, H, W, C]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            v3[d0 + d1*v5] = v8;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_b0013a13ccd213aecb394c7a527044a160de4f0269eca48b64b8de1e(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3828 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40c88>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<ConstantVariable ConstantVariable3829 shape=(64,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c409b0>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3682 shape=(1, 128, 128, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7c860>\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    //\n    //<Variable Variable3683 shape=(1, 128, 128, 64), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c7c860>\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    //load: 64\n    const int v5 = meta_buffer[4];\n    //load: 64\n    const int v6 = meta_buffer[5];\n    //load: 64\n    const int D0 = meta_buffer[6];\n    //load: 16384\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseMul inputs={'x0': <Variable Variable3682 shape=(1, 128, 128, 64), order=[N, H, W, C]>, 'x1': <ConstantVariable ConstantVariable3828 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable3179 shape=(1, 64, 128, 128), order=[N, C, H, W]>}>\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v7;\n            }\n            //<ElementwiseAdd inputs={'x0': <Variable Variable3179 shape=(1, 64, 128, 128), order=[N, C, H, W]>, 'x1': <ConstantVariable ConstantVariable3829 shape=(64,), order=[C]>}, outputs={'y': <Variable Variable377 shape=(1, 64, 128, 128), order=[N, C, H, W]>}>\n            float v11;\n            {\n                v11 = v10 + v8;\n            }\n            //<Relu inputs={'x0': <Variable Variable377 shape=(1, 64, 128, 128), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3683 shape=(1, 128, 128, 64), order=[N, H, W, C]>}>\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0 + d1*v6] = v12;\n        }\n    }\n}\n\n\nkernel void sgemm_2f5fb17c61936ed97c3b40058a42f14de9b21cb6b4208d457114dbc7(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_db92a9b864c8e69ca24c2446096c9e9aa889cf870858d0f2c7478d60(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    //<ConstantVariable ConstantVariable3827 shape=(3,), order=[C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40f98>\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    //\n    //<Variable Variable3680 shape=(1, 128, 128, 3), order=[N, H, W, C]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130992f98>\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    //\n    //<Variable Variable3681 shape=(1, 3, 128, 128), order=[N, C, H, W]>\n    //load: <webdnn.backend.code_generator.allocator.Allocation object at 0x130c40e10>\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    //load: 3\n    const int v4 = meta_buffer[3];\n    //load: 16384\n    const int v5 = meta_buffer[4];\n    //load: 3\n    const int D0 = meta_buffer[5];\n    //load: 16384\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            //<ElementwiseAdd inputs={'x1': <ConstantVariable ConstantVariable3827 shape=(3,), order=[C]>, 'x0': <Variable Variable3680 shape=(1, 128, 128, 3), order=[N, H, W, C]>}, outputs={'y': <Variable Variable380 shape=(1, 3, 128, 128), order=[N, C, H, W]>}>\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            //<Tanh inputs={'x0': <Variable Variable380 shape=(1, 3, 128, 128), order=[N, C, H, W]>}, outputs={'y': <Variable Variable3681 shape=(1, 3, 128, 128), order=[N, C, H, W]>}>\n            float v9;\n            {\n                v9 = (v8 >= 10.0 ? 1.0 : tanh(v8));\n            }\n            v3[d0*v5 + d1] = v9;\n        }\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "sgemm_81e90e8b08464e9a44e7910ad875fd886afeba4c8b6adf24eec65a4b",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 256,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        98,
        5,
        0,
        0,
        0,
        0,
        131,
        89,
        122,
        0,
        1,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        162,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e054e9592c688e900d43b4539f1d0b3418c031049a14901242973384",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        128,
        40,
        0,
        131,
        89,
        122,
        0,
        131,
        25,
        122,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        122,
        0,
        131,
        153,
        121,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_01d732c2a0b27fbd1cc7efa543dbe6ae628408b156c4c76eaaeda903",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        25,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        192,
        40,
        0,
        131,
        217,
        121,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_d591cfd54eea27b8d1f8e05c3912da13d92a08f854eeef2de58a8b1b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        80,
        41,
        0,
        131,
        217,
        121,
        0,
        131,
        217,
        121,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        80,
        41,
        0,
        131,
        217,
        121,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c4989f403d12993de160ea6426054d7b560c52c20869203d82b999f1",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        224,
        41,
        0,
        131,
        217,
        121,
        0,
        131,
        153,
        121,
        0,
        131,
        217,
        121,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        224,
        41,
        0,
        131,
        153,
        121,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_af06c698ff27a8c95bc48eec864ddb426b28164ad37bc7bbf1f898e5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        112,
        42,
        0,
        131,
        153,
        121,
        0,
        131,
        153,
        121,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        112,
        42,
        0,
        131,
        89,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e616cea79df9c359d1f493a90120c12ee8e0bee0a66ac5a75223c22c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        0,
        43,
        0,
        131,
        217,
        121,
        0,
        131,
        89,
        122,
        0,
        131,
        25,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        1,
        43,
        0,
        131,
        89,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7b95cfdcb940be175412172729d1234f711e0caeb52f4c4234871453",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        145,
        43,
        0,
        131,
        89,
        122,
        0,
        131,
        153,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        145,
        43,
        0,
        131,
        25,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_27b7f62170de2068a663c89c82ec001ee73e994e743316ac22807e49",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        33,
        44,
        0,
        131,
        25,
        122,
        0,
        131,
        25,
        124,
        0,
        131,
        25,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        33,
        44,
        0,
        131,
        25,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_d0b8b793bd82169cd3f03b75c4e9a189e2ef6d165c195b40561cb5a9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        177,
        44,
        0,
        131,
        25,
        123,
        0,
        131,
        217,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        177,
        44,
        0,
        131,
        89,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_4a5f8de8062e780cbfc1bcf0a5c515dac42b6efc0771c5f2bd5944de",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        65,
        45,
        0,
        131,
        89,
        123,
        0,
        131,
        25,
        122,
        0,
        131,
        89,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        66,
        45,
        0,
        131,
        25,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_5e906dddd1bc8784b84efa2f4178ccae76a9a05cb3a2ce9271f348fe",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        210,
        45,
        0,
        131,
        25,
        124,
        0,
        131,
        25,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        210,
        45,
        0,
        131,
        25,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_67d40644d11849a317e2f3c3633367105ab6a448ce476a4a50f2f43b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        98,
        46,
        0,
        131,
        25,
        124,
        0,
        131,
        89,
        123,
        0,
        131,
        25,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        98,
        46,
        0,
        131,
        153,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_76e76544f9dbf6b667ddc1e61f527e9ff8a4aa16154bbe17a74a294b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        242,
        46,
        0,
        131,
        153,
        122,
        0,
        131,
        153,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        242,
        46,
        0,
        131,
        153,
        121,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_87516e893cfb5161a4a319defa3d3d0422eb9626e634106c5624ee81",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        130,
        47,
        0,
        131,
        153,
        121,
        0,
        131,
        25,
        123,
        0,
        131,
        153,
        121,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        131,
        47,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_2b3bef144a0f2a9d493a55415664821ba0c45522efdbb0f621a5a44e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        19,
        48,
        0,
        131,
        217,
        123,
        0,
        131,
        25,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        19,
        48,
        0,
        131,
        153,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_009daceb9d502043da6c0e86e64bc04b5a4ce5865e8a4521fc508b97",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        163,
        48,
        0,
        131,
        153,
        121,
        0,
        131,
        153,
        124,
        0,
        131,
        153,
        121,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        163,
        48,
        0,
        131,
        89,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_282ef2d0a47478deb180a5ae52b83ba67b289eee78663ec2a20e49bb",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        51,
        49,
        0,
        131,
        89,
        122,
        0,
        131,
        153,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        51,
        49,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7854360c15e27bdf792da15b694129dff1363fbe2f3330ed2a59d2b9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        195,
        49,
        0,
        131,
        153,
        121,
        0,
        131,
        217,
        123,
        0,
        131,
        153,
        121,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        196,
        49,
        0,
        131,
        153,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_aa7c22a069d41286b2fdbad534806578df6b914241e98d1ec5f35728",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        84,
        50,
        0,
        131,
        153,
        124,
        0,
        131,
        153,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        84,
        50,
        0,
        131,
        25,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_3c53069c7847a5946182c14004dc8ad1a126dec1d1d2af9576713f0f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        228,
        50,
        0,
        131,
        153,
        121,
        0,
        131,
        25,
        124,
        0,
        131,
        89,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        228,
        50,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f5e2cb7ef239d0c8f4995851d45167a2c1b12bfb4c19c1e56decff3c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        116,
        51,
        0,
        131,
        217,
        123,
        0,
        131,
        153,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        116,
        51,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_16c82ae84703a535da65318db10807b4cbab6f8f88c5e5ec90aebd8a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        4,
        52,
        0,
        131,
        217,
        123,
        0,
        131,
        89,
        123,
        0,
        131,
        153,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        5,
        52,
        0,
        131,
        217,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c2510b8d53b1c94ae803d0df69f82ca9822a5647ef41e2f11947f1a3",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        149,
        52,
        0,
        131,
        217,
        122,
        0,
        131,
        153,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        149,
        52,
        0,
        131,
        25,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_6b073d673988cbbfaf1ddb05f29b25daed95e45c92bee5d99630a1cf",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        37,
        53,
        0,
        131,
        25,
        124,
        0,
        131,
        153,
        123,
        0,
        131,
        89,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        37,
        53,
        0,
        131,
        153,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_3215e7f561eef757d1bb2d4a699fb0a7c4871d8a91277b9ed683fa33",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        181,
        53,
        0,
        131,
        153,
        124,
        0,
        131,
        25,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        181,
        53,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_5995b42ec143db185040151cd04e327ad317c17c90ed4442b9a84a63",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        69,
        54,
        0,
        131,
        217,
        123,
        0,
        131,
        89,
        123,
        0,
        131,
        153,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        70,
        54,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c7ca163d3f63a473d70354d305c6451051557fc755865f35236bfb2d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        214,
        54,
        0,
        131,
        217,
        123,
        0,
        131,
        217,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        214,
        54,
        0,
        131,
        217,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_2367b95474a9e0d765ad986225ec2765c8367c74ae997799a10483ae",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        102,
        55,
        0,
        131,
        217,
        122,
        0,
        131,
        153,
        124,
        0,
        131,
        217,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        102,
        55,
        0,
        131,
        89,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2292bc48b333f5102e7c08e9a9e9ad1a81c77f17d47410e5bb25b09",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        246,
        55,
        0,
        131,
        89,
        123,
        0,
        131,
        153,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        246,
        55,
        0,
        131,
        89,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_48ec03d2e3487206f0fd2ca221b5dce39c51390b33a34263b3edad55",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        134,
        56,
        0,
        131,
        89,
        123,
        0,
        131,
        217,
        122,
        0,
        131,
        153,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        135,
        56,
        0,
        131,
        25,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_27ea93bfcf67ecd5271712f8bf20b06164a152c992b715478afc7166",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        23,
        57,
        0,
        131,
        25,
        123,
        0,
        131,
        25,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        23,
        57,
        0,
        131,
        89,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_34c9ce4e02b861188033419626b713421cfd53b16d25b1bca2369e8b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        57,
        0,
        131,
        153,
        122,
        0,
        131,
        89,
        124,
        0,
        131,
        25,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        25,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        128,
        167,
        57,
        0,
        131,
        217,
        123,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_ae3432b23808a28ee83f372ec22037a974fd0573791d9b9b7d484f5c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        55,
        58,
        0,
        131,
        217,
        123,
        0,
        131,
        217,
        123,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        217,
        123,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        192,
        55,
        58,
        0,
        131,
        89,
        124,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_48e9362c61aa189cf53511ac1d2b945c87a5ace79a63cdc212d96508",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        199,
        58,
        0,
        131,
        89,
        124,
        0,
        131,
        25,
        124,
        0,
        131,
        153,
        124,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        124,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        0,
        200,
        58,
        0,
        131,
        217,
        122,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_5972479bea958b3cb173aae274682e34ee913502e564d46fe2193d1d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        88,
        59,
        0,
        131,
        217,
        122,
        0,
        131,
        89,
        122,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        122,
        0,
        131,
        89,
        119,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        64,
        88,
        59,
        0,
        131,
        153,
        121,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_a000ac957635042b40125802f38371401a54e3b7c6f98cdcac292aee",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        152,
        61,
        0,
        131,
        153,
        121,
        0,
        131,
        153,
        121,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        153,
        121,
        0,
        131,
        89,
        119,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        32,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_2b6c3a3ec4c969b750b4de3bf5d809d449723efe8c3968597f04e9d5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        153,
        61,
        0,
        128,
        153,
        61,
        0,
        131,
        89,
        119,
        0,
        131,
        89,
        119,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 1156,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        131,
        89,
        102,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        102,
        0,
        192,
        153,
        61,
        0,
        131,
        89,
        111,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_032f577171c682895fe644f54eb957eba5fa0fbae473244eeedc2041",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        217,
        63,
        0,
        131,
        89,
        111,
        0,
        131,
        89,
        111,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        111,
        0,
        131,
        89,
        115,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_6b37344c95ea25858495e9315f5b958eefebfb4b82d6db4bcf1b9e3a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        219,
        63,
        0,
        192,
        218,
        63,
        0,
        131,
        89,
        115,
        0,
        131,
        89,
        119,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 4356,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        119,
        0,
        131,
        89,
        66,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        66,
        0,
        64,
        219,
        63,
        0,
        131,
        89,
        102,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_ecbabea27458df228a18b77bbd1bb799f37b52c50d61076bf366dc81",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        27,
        66,
        0,
        131,
        89,
        102,
        0,
        131,
        89,
        102,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        102,
        0,
        131,
        89,
        82,
        5,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_b0013a13ccd213aecb394c7a527044a160de4f0269eca48b64b8de1e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        28,
        66,
        0,
        64,
        28,
        66,
        0,
        131,
        89,
        82,
        5,
        131,
        89,
        82,
        5,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 18496,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        82,
        5,
        131,
        89,
        66,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_2f5fb17c61936ed97c3b40058a42f14de9b21cb6b4208d457114dbc7",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        89,
        66,
        0,
        192,
        28,
        66,
        0,
        131,
        89,
        82,
        5,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        64,
        20,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_db92a9b864c8e69ca24c2446096c9e9aa889cf870858d0f2c7478d60",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        89,
        66,
        0,
        131,
        89,
        82,
        5,
        131,
        153,
        121,
        0,
        3,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "static": {
      "size": 90331685,
      "allocations": {
        "a353": {
          "name": "a353",
          "offset": 90331523,
          "size": 162
        },
        "a355": {
          "name": "a355",
          "offset": 8018307,
          "size": 16384
        },
        "a356": {
          "name": "a356",
          "offset": 8001923,
          "size": 16384
        },
        "a357": {
          "name": "a357",
          "offset": 7969155,
          "size": 16384
        },
        "a358": {
          "name": "a358",
          "offset": 8001923,
          "size": 16384
        },
        "a359": {
          "name": "a359",
          "offset": 7821699,
          "size": 147456
        },
        "a475": {
          "name": "a475",
          "offset": 7985539,
          "size": 16384
        },
        "a362": {
          "name": "a362",
          "offset": 7821699,
          "size": 147456
        },
        "a476": {
          "name": "a476",
          "offset": 7985539,
          "size": 16384
        },
        "a365": {
          "name": "a365",
          "offset": 7821699,
          "size": 147456
        },
        "a477": {
          "name": "a477",
          "offset": 7969155,
          "size": 16384
        },
        "a368": {
          "name": "a368",
          "offset": 7821699,
          "size": 147456
        },
        "a369": {
          "name": "a369",
          "offset": 8018307,
          "size": 16384
        },
        "a478": {
          "name": "a478",
          "offset": 8001923,
          "size": 16384
        },
        "a371": {
          "name": "a371",
          "offset": 7821699,
          "size": 147456
        },
        "a372": {
          "name": "a372",
          "offset": 8018307,
          "size": 16384
        },
        "a373": {
          "name": "a373",
          "offset": 8165763,
          "size": 16384
        },
        "a374": {
          "name": "a374",
          "offset": 7821699,
          "size": 147456
        },
        "a375": {
          "name": "a375",
          "offset": 8132995,
          "size": 16384
        },
        "a377": {
          "name": "a377",
          "offset": 7821699,
          "size": 147456
        },
        "a378": {
          "name": "a378",
          "offset": 8067459,
          "size": 16384
        },
        "a379": {
          "name": "a379",
          "offset": 8051075,
          "size": 16384
        },
        "a380": {
          "name": "a380",
          "offset": 7821699,
          "size": 147456
        },
        "a479": {
          "name": "a479",
          "offset": 8083843,
          "size": 16384
        },
        "a383": {
          "name": "a383",
          "offset": 7821699,
          "size": 147456
        },
        "a480": {
          "name": "a480",
          "offset": 8132995,
          "size": 16384
        },
        "a386": {
          "name": "a386",
          "offset": 7821699,
          "size": 147456
        },
        "a387": {
          "name": "a387",
          "offset": 8132995,
          "size": 16384
        },
        "a388": {
          "name": "a388",
          "offset": 8067459,
          "size": 16384
        },
        "a389": {
          "name": "a389",
          "offset": 7821699,
          "size": 147456
        },
        "a481": {
          "name": "a481",
          "offset": 8034691,
          "size": 16384
        },
        "a392": {
          "name": "a392",
          "offset": 7821699,
          "size": 147456
        },
        "a484": {
          "name": "a484",
          "offset": 7969155,
          "size": 16384
        },
        "a395": {
          "name": "a395",
          "offset": 7821699,
          "size": 147456
        },
        "a396": {
          "name": "a396",
          "offset": 8116611,
          "size": 16384
        },
        "a397": {
          "name": "a397",
          "offset": 8132995,
          "size": 16384
        },
        "a398": {
          "name": "a398",
          "offset": 7821699,
          "size": 147456
        },
        "a399": {
          "name": "a399",
          "offset": 8165763,
          "size": 16384
        },
        "a401": {
          "name": "a401",
          "offset": 7821699,
          "size": 147456
        },
        "a402": {
          "name": "a402",
          "offset": 8018307,
          "size": 16384
        },
        "a403": {
          "name": "a403",
          "offset": 8034691,
          "size": 16384
        },
        "a404": {
          "name": "a404",
          "offset": 7821699,
          "size": 147456
        },
        "a405": {
          "name": "a405",
          "offset": 8116611,
          "size": 16384
        },
        "a407": {
          "name": "a407",
          "offset": 7821699,
          "size": 147456
        },
        "a485": {
          "name": "a485",
          "offset": 8165763,
          "size": 16384
        },
        "a410": {
          "name": "a410",
          "offset": 7821699,
          "size": 147456
        },
        "a411": {
          "name": "a411",
          "offset": 8132995,
          "size": 16384
        },
        "a412": {
          "name": "a412",
          "offset": 8083843,
          "size": 16384
        },
        "a413": {
          "name": "a413",
          "offset": 7821699,
          "size": 147456
        },
        "a414": {
          "name": "a414",
          "offset": 8116611,
          "size": 16384
        },
        "a415": {
          "name": "a415",
          "offset": 8165763,
          "size": 16384
        },
        "a416": {
          "name": "a416",
          "offset": 7821699,
          "size": 147456
        },
        "a417": {
          "name": "a417",
          "offset": 8116611,
          "size": 16384
        },
        "a418": {
          "name": "a418",
          "offset": 8100227,
          "size": 16384
        },
        "a419": {
          "name": "a419",
          "offset": 7821699,
          "size": 147456
        },
        "a420": {
          "name": "a420",
          "offset": 8051075,
          "size": 16384
        },
        "a421": {
          "name": "a421",
          "offset": 8034691,
          "size": 16384
        },
        "a422": {
          "name": "a422",
          "offset": 7821699,
          "size": 147456
        },
        "a423": {
          "name": "a423",
          "offset": 8132995,
          "size": 16384
        },
        "a424": {
          "name": "a424",
          "offset": 8083843,
          "size": 16384
        },
        "a425": {
          "name": "a425",
          "offset": 7821699,
          "size": 147456
        },
        "a426": {
          "name": "a426",
          "offset": 8165763,
          "size": 16384
        },
        "a427": {
          "name": "a427",
          "offset": 8132995,
          "size": 16384
        },
        "a428": {
          "name": "a428",
          "offset": 7821699,
          "size": 147456
        },
        "a429": {
          "name": "a429",
          "offset": 8116611,
          "size": 16384
        },
        "a430": {
          "name": "a430",
          "offset": 8165763,
          "size": 16384
        },
        "a431": {
          "name": "a431",
          "offset": 7821699,
          "size": 147456
        },
        "a486": {
          "name": "a486",
          "offset": 8116611,
          "size": 16384
        },
        "a434": {
          "name": "a434",
          "offset": 7821699,
          "size": 147456
        },
        "a487": {
          "name": "a487",
          "offset": 8051075,
          "size": 16384
        },
        "a437": {
          "name": "a437",
          "offset": 7821699,
          "size": 147456
        },
        "a438": {
          "name": "a438",
          "offset": 8083843,
          "size": 16384
        },
        "a439": {
          "name": "a439",
          "offset": 8100227,
          "size": 16384
        },
        "a440": {
          "name": "a440",
          "offset": 7821699,
          "size": 147456
        },
        "a441": {
          "name": "a441",
          "offset": 8083843,
          "size": 16384
        },
        "a442": {
          "name": "a442",
          "offset": 8034691,
          "size": 16384
        },
        "a443": {
          "name": "a443",
          "offset": 7821699,
          "size": 147456
        },
        "a488": {
          "name": "a488",
          "offset": 8067459,
          "size": 16384
        },
        "a446": {
          "name": "a446",
          "offset": 7821699,
          "size": 147456
        },
        "a447": {
          "name": "a447",
          "offset": 8149379,
          "size": 16384
        },
        "a448": {
          "name": "a448",
          "offset": 8132995,
          "size": 16384
        },
        "a449": {
          "name": "a449",
          "offset": 7821699,
          "size": 147456
        },
        "a489": {
          "name": "a489",
          "offset": 8116611,
          "size": 16384
        },
        "a452": {
          "name": "a452",
          "offset": 7821699,
          "size": 147456
        },
        "a453": {
          "name": "a453",
          "offset": 8149379,
          "size": 16384
        },
        "a454": {
          "name": "a454",
          "offset": 8165763,
          "size": 16384
        },
        "a455": {
          "name": "a455",
          "offset": 7821699,
          "size": 147456
        },
        "a456": {
          "name": "a456",
          "offset": 8051075,
          "size": 16384
        },
        "a457": {
          "name": "a457",
          "offset": 8018307,
          "size": 16384
        },
        "a458": {
          "name": "a458",
          "offset": 7821699,
          "size": 147456
        },
        "a490": {
          "name": "a490",
          "offset": 7969155,
          "size": 65536
        },
        "a491": {
          "name": "a491",
          "offset": 7821699,
          "size": 65536
        },
        "a463": {
          "name": "a463",
          "offset": 6707587,
          "size": 589824
        },
        "a492": {
          "name": "a492",
          "offset": 7297411,
          "size": 262144
        },
        "a466": {
          "name": "a466",
          "offset": 7559555,
          "size": 262144
        },
        "a467": {
          "name": "a467",
          "offset": 7821699,
          "size": 262144
        },
        "a468": {
          "name": "a468",
          "offset": 4348291,
          "size": 2359296
        },
        "a493": {
          "name": "a493",
          "offset": 6707587,
          "size": 1048576
        },
        "a494": {
          "name": "a494",
          "offset": 89282947,
          "size": 1048576
        },
        "a473": {
          "name": "a473",
          "offset": 4348291,
          "size": 84934656
        },
        "a474": {
          "name": "a474",
          "offset": 89282947,
          "size": 49152
        },
        "a354": {
          "name": "a354",
          "offset": 7969155,
          "size": 49152
        },
        "a271": {
          "name": "a271",
          "offset": 0,
          "size": 2654208
        },
        "a272": {
          "name": "a272",
          "offset": 2654208,
          "size": 16384
        },
        "a273": {
          "name": "a273",
          "offset": 2670592,
          "size": 36864
        },
        "a274": {
          "name": "a274",
          "offset": 2707456,
          "size": 64
        },
        "a275": {
          "name": "a275",
          "offset": 2707520,
          "size": 36864
        },
        "a276": {
          "name": "a276",
          "offset": 2744384,
          "size": 64
        },
        "a277": {
          "name": "a277",
          "offset": 2744448,
          "size": 36864
        },
        "a278": {
          "name": "a278",
          "offset": 2781312,
          "size": 64
        },
        "a279": {
          "name": "a279",
          "offset": 2781376,
          "size": 36864
        },
        "a280": {
          "name": "a280",
          "offset": 2818240,
          "size": 64
        },
        "a281": {
          "name": "a281",
          "offset": 2818304,
          "size": 36864
        },
        "a282": {
          "name": "a282",
          "offset": 2855168,
          "size": 64
        },
        "a283": {
          "name": "a283",
          "offset": 2855232,
          "size": 36864
        },
        "a284": {
          "name": "a284",
          "offset": 2892096,
          "size": 64
        },
        "a285": {
          "name": "a285",
          "offset": 2892160,
          "size": 36864
        },
        "a286": {
          "name": "a286",
          "offset": 2929024,
          "size": 64
        },
        "a287": {
          "name": "a287",
          "offset": 2929088,
          "size": 36864
        },
        "a288": {
          "name": "a288",
          "offset": 2965952,
          "size": 64
        },
        "a289": {
          "name": "a289",
          "offset": 2966016,
          "size": 36864
        },
        "a290": {
          "name": "a290",
          "offset": 3002880,
          "size": 64
        },
        "a291": {
          "name": "a291",
          "offset": 3002944,
          "size": 36864
        },
        "a292": {
          "name": "a292",
          "offset": 3039808,
          "size": 64
        },
        "a293": {
          "name": "a293",
          "offset": 3039872,
          "size": 36864
        },
        "a294": {
          "name": "a294",
          "offset": 3076736,
          "size": 64
        },
        "a295": {
          "name": "a295",
          "offset": 3076800,
          "size": 36864
        },
        "a296": {
          "name": "a296",
          "offset": 3113664,
          "size": 64
        },
        "a297": {
          "name": "a297",
          "offset": 3113728,
          "size": 36864
        },
        "a298": {
          "name": "a298",
          "offset": 3150592,
          "size": 64
        },
        "a299": {
          "name": "a299",
          "offset": 3150656,
          "size": 36864
        },
        "a300": {
          "name": "a300",
          "offset": 3187520,
          "size": 64
        },
        "a301": {
          "name": "a301",
          "offset": 3187584,
          "size": 36864
        },
        "a302": {
          "name": "a302",
          "offset": 3224448,
          "size": 64
        },
        "a303": {
          "name": "a303",
          "offset": 3224512,
          "size": 36864
        },
        "a304": {
          "name": "a304",
          "offset": 3261376,
          "size": 64
        },
        "a305": {
          "name": "a305",
          "offset": 3261440,
          "size": 36864
        },
        "a306": {
          "name": "a306",
          "offset": 3298304,
          "size": 64
        },
        "a307": {
          "name": "a307",
          "offset": 3298368,
          "size": 36864
        },
        "a308": {
          "name": "a308",
          "offset": 3335232,
          "size": 64
        },
        "a309": {
          "name": "a309",
          "offset": 3335296,
          "size": 36864
        },
        "a310": {
          "name": "a310",
          "offset": 3372160,
          "size": 64
        },
        "a311": {
          "name": "a311",
          "offset": 3372224,
          "size": 36864
        },
        "a312": {
          "name": "a312",
          "offset": 3409088,
          "size": 64
        },
        "a313": {
          "name": "a313",
          "offset": 3409152,
          "size": 36864
        },
        "a314": {
          "name": "a314",
          "offset": 3446016,
          "size": 64
        },
        "a315": {
          "name": "a315",
          "offset": 3446080,
          "size": 36864
        },
        "a316": {
          "name": "a316",
          "offset": 3482944,
          "size": 64
        },
        "a317": {
          "name": "a317",
          "offset": 3483008,
          "size": 36864
        },
        "a318": {
          "name": "a318",
          "offset": 3519872,
          "size": 64
        },
        "a319": {
          "name": "a319",
          "offset": 3519936,
          "size": 36864
        },
        "a320": {
          "name": "a320",
          "offset": 3556800,
          "size": 64
        },
        "a321": {
          "name": "a321",
          "offset": 3556864,
          "size": 36864
        },
        "a322": {
          "name": "a322",
          "offset": 3593728,
          "size": 64
        },
        "a323": {
          "name": "a323",
          "offset": 3593792,
          "size": 36864
        },
        "a324": {
          "name": "a324",
          "offset": 3630656,
          "size": 64
        },
        "a325": {
          "name": "a325",
          "offset": 3630720,
          "size": 36864
        },
        "a326": {
          "name": "a326",
          "offset": 3667584,
          "size": 64
        },
        "a327": {
          "name": "a327",
          "offset": 3667648,
          "size": 36864
        },
        "a328": {
          "name": "a328",
          "offset": 3704512,
          "size": 64
        },
        "a329": {
          "name": "a329",
          "offset": 3704576,
          "size": 36864
        },
        "a330": {
          "name": "a330",
          "offset": 3741440,
          "size": 64
        },
        "a331": {
          "name": "a331",
          "offset": 3741504,
          "size": 36864
        },
        "a332": {
          "name": "a332",
          "offset": 3778368,
          "size": 64
        },
        "a333": {
          "name": "a333",
          "offset": 3778432,
          "size": 36864
        },
        "a334": {
          "name": "a334",
          "offset": 3815296,
          "size": 64
        },
        "a335": {
          "name": "a335",
          "offset": 3815360,
          "size": 36864
        },
        "a336": {
          "name": "a336",
          "offset": 3852224,
          "size": 64
        },
        "a337": {
          "name": "a337",
          "offset": 3852288,
          "size": 36864
        },
        "a338": {
          "name": "a338",
          "offset": 3889152,
          "size": 64
        },
        "a339": {
          "name": "a339",
          "offset": 3889216,
          "size": 147456
        },
        "a340": {
          "name": "a340",
          "offset": 4036672,
          "size": 256
        },
        "a341": {
          "name": "a341",
          "offset": 4036928,
          "size": 64
        },
        "a342": {
          "name": "a342",
          "offset": 4036992,
          "size": 64
        },
        "a343": {
          "name": "a343",
          "offset": 4037056,
          "size": 147456
        },
        "a344": {
          "name": "a344",
          "offset": 4184512,
          "size": 256
        },
        "a345": {
          "name": "a345",
          "offset": 4184768,
          "size": 64
        },
        "a346": {
          "name": "a346",
          "offset": 4184832,
          "size": 64
        },
        "a347": {
          "name": "a347",
          "offset": 4184896,
          "size": 147456
        },
        "a348": {
          "name": "a348",
          "offset": 4332352,
          "size": 256
        },
        "a349": {
          "name": "a349",
          "offset": 4332608,
          "size": 64
        },
        "a350": {
          "name": "a350",
          "offset": 4332672,
          "size": 64
        },
        "a351": {
          "name": "a351",
          "offset": 4332736,
          "size": 15552
        },
        "a352": {
          "name": "a352",
          "offset": 4348288,
          "size": 3
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a353"
  ],
  "outputs": [
    "a354"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}